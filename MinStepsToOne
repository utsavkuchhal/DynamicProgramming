import java.util.Arrays;

public class MinStepsToOne {
	static int[] arr = new int[100];

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			int n = 10;
	
			Arrays.fill(arr, -1);
			System.out.println(MinStepsToOneTopDown(n));
	}
	
	
	public static int MinStepsToOne(int n)
	{
		if(n == 1)
			return 0;
		
		int res  = MinStepsToOne(n - 1);
		
		if(n % 2 == 0)
			res = Math.min(res, MinStepsToOne(n / 2));
		
		if(n % 3 == 0)
			res = Math.min(res,MinStepsToOne(n / 3));
		
		return res + 1;	
	}
	

	public static int MinStepsToOneMemo(int n)
	{
		if (n == 1) {
			return 1;
		}
		
		if(arr[n] != -1)
			return arr[n];
		
		int res  = MinStepsToOne(n - 1);
		
		if(n % 2 == 0)
			res = Math.min(res, MinStepsToOne(n / 2));
		
		if(n % 3 == 0)
			res = Math.min(res,MinStepsToOne(n / 3));
		
		arr[n] = res + 1;
		
		return arr[n];	
	}

	public static int MinStepsToOneTopDown(int n)
	{
		int[] dp = new int[n + 1];
		
		dp[1] = 0;
		
		int op1,op2,op3;
		
		
		for(int i = 2; i <= n; i++)
		{
			op1 = op2 = op3 = Integer.MAX_VALUE;
			if(n % 3 == 0)
				op1 = dp[i / 3] + 1;
			if(n % 2 == 0)
				op2 = dp[i / 2] + 1;
			op3 = dp[i - 1] + 1;
			
			dp[i] = Math.min(op1, Math.min(op2,op3));
		}
		return dp[n];
	}
}
