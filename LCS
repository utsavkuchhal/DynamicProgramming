import java.util.Arrays;

public class LCS {
	
	static int[][] dp = new int[100][100];
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String a = "abcc";
		String b = "abdecf";
		
		for(int[] row  : dp)
			Arrays.fill(row, -1);
			
		
		System.out.println(LCSTopDown(a, b));
	}
	
	public static int LCS(String a,String b, int n,int m)
	{

		if(m == 0 || n == 0)
		{
			return  0;
		}
		
		if(a.charAt(n - 1)  == b.charAt(m - 1))
			return 1 + LCS(a,b,n - 1,m - 1);
		else 
			return Math.max(LCS(a,b,n - 1,m), LCS(a,b,n,m - 1));
			
	}
	

	public static int LCSMemorization(String a,String b, int n,int m) {
		
		if(m == 0 || n == 0)
			return  0;
		
		if(dp[m][n] != -1)
			return dp[m][n];
		
		if(a.charAt(n - 1)  == b.charAt(m - 1))
			return dp[n][m] =  1 + LCS(a,b,n - 1,m - 1);
		else 
		   return dp[n][m] = Math.max(LCS(a,b,n - 1,m), LCS(a,b,n,m - 1));
	
	}
	
	public static int LCSTopDown(String a,String b)
	{
		int[][] arr = new int[a.length() + 1][b.length() + 1];
		
		for(int i = 0; i < a.length()  + 1; i++)
			arr[i][0] = 0;
		
		for(int i = 0; i < b.length() + 1; i++)
			arr[0][i] = 0;
		
		for(int i = 1; i<a.length() + 1; i++)
		{
			for(int j = 1; j < b.length() + 1; j++)
			{
				if(a.charAt(i - 1) == b.charAt(j - 1))
					arr[i][j] = 1 + arr[i - 1][j - 1];
					else {
						arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
					}
			}
		}
			
		return arr[a.length()][b.length()];
	}
	}

